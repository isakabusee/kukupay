{"ast":null,"code":"// import React, { useContext, useEffect, useReducer } from 'react';\n// import CheckoutSteps from '../components/CheckoutSteps';\n// import { Helmet } from 'react-helmet-async';\n// import { Link, useNavigate } from 'react-router-dom';\n// import { Store } from '../Store';\n// import { toast } from 'react-toastify';\n// import { getError } from '../utils';\n// import Button from 'react-bootstrap/Button';\n// import Col from 'react-bootstrap/Col';\n// import Card from 'react-bootstrap/Card';\n// import Row from 'react-bootstrap/Row';\n// import ListGroup from 'react-bootstrap/ListGroup';\n// import LoadingBox from '../components/LoadingBox';\n// import Axios from 'axios';\n// const reducer = (state, action) => {\n//     switch (action.type) {\n//         case 'CREATE_REQUEST':\n//             return { ...state, loading: true };\n//         case 'CREATE_SUCCESS':\n//             return { ...state, loading: false };\n//         case 'CREATE_FAIL':\n//             return { ...state, loading: false };\n//         default:\n//             return state;\n//     }\n// }\n// export default function PlaceOrderScreen() {\n//     const navigate = useNavigate();\n//     const [{ loading }, dispatch] = useReducer(reducer, { loading: false, });\n//     const { state, dispatch: ctxDispatch } = useContext(Store);\n//     const { cart, userInfo } = state;\n//     const  round2 = (num) => Math.round(num * 100 + Number.EPSLON) / 100; //123.2345 => 123.23\n//     cart.itemsPrice = round2(\n//         cart.cartItems.reduce((a, c) => a + c.quantity * c.price, 0)\n//     );\n//     cart.shippingPrice = cart.itemsPrice > 100 ? round2(0) : round2(10);\n//     cart.taxPrice = round2(0.15 * cart.itemsPrice);\n//     cart.totalPrice = cart.itemsPrice + cart.shippingPrice + cart.taxPrice;\n//     const placeOrderHandler = async () => {\n//         try {\n//             dispatch({ type: 'CREATE_REQUEST' });\n//             const { data } = await Axios.post('/api/orders', {\n//                 orderItems: cart.cartItems,\n//                 shippingAddress: cart.shippingAddress,\n//                 paymentMethod: cart.paymentMethod,\n//                 itemsPrice: cart.itemsPrice,\n//                 shippingPrice: cart.shippingPrice,\n//                 taxPrice: cart.taxPrice,\n//                 totalPrice: cart.totalPrice,\n//             },\n//             {\n//                 headers: {\n//                     authorization: `Bearer ${userInfo.token}`,\n//                 },\n//             }\n//             );\n//             ctxDispatch({ type: 'CART_CLEAR' });\n//             dispatch({ type: 'CREATE_SUCCESS' });\n//             localStorage.removeItem('cartItems');\n//             navigate(`/order/${data.order._id}`)\n//         } catch (err) {\n//             dispatch({ type: 'CREATE_FAIL' });\n//             toast.error(getError(err));\n//         }\n//     }\n//     useEffect(() => {\n//         if (!cart.paymentMethod){\n//             navigate('/payment');\n//         }\n//     },[cart, navigate]);\n//   return (\n//     <div>\n//         <CheckoutSteps step1 step2 step3 step4></CheckoutSteps>\n//         <Helmet>\n//             <title>Preview Order</title>\n//         </Helmet>\n//         <h1 className=\"my-3\">Preview Order</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <Card className=\"mb-3\">\n//                 <Card.Body>\n//                     <Card.Title>Shipping</Card.Title>\n//                     <Card.Text>\n//                         <strong> Name:</strong> {cart.shippingAddress.fullName} <br/>\n//                         <strong>Address:</strong> {cart.shippingAddress.address}, {cart.shippingAddress.city}, {cart.shippingAddress.postalCode}, {cart.shippingAddress.country}\n//                     </Card.Text>\n//                     <Link to=\"/shipping\">Edit</Link>\n//                 </Card.Body>\n//                 </Card>\n//                 <Card className=\"mb-3\">\n//                     <Card.Body>\n//                         <Card.Title>Payment</Card.Title>\n//                         <Card.Text>\n//                             <strong>Method:</strong> {cart.paymentMethod}\n//                         </Card.Text>\n//                         <Link to=\"/payment\">Edit</Link>\n//                     </Card.Body>\n//                 </Card>\n//                 <Card className=\"mb-3\">\n//                     <Card.Body>\n//                         <Card.Title>Items</Card.Title>\n//                         <ListGroup variant=\"flush\">{cart.cartItems.map((item) => (<ListGroup.Item key={item._id}>\n//                             <Row className=\"align-items-center\">\n//                                 <Col md={6}><img src={item.image} alt={item.name} className=\"img-fluid rounded img-thumbnail\"></img>{' '}\n//                                 <Link to={`/product/${item.slug}`}> {item.name}</Link></Col>\n//                                 <Col md={3}>\n//                                     <span>{item.quantity}</span>\n//                                 </Col>\n//                                 <Col md={3}>${item.price}</Col>\n//                             </Row>\n//                         </ListGroup.Item>))}</ListGroup>\n//                         <Link to=\"/cart\">Edit</Link>\n//                     </Card.Body>\n//                 </Card>\n//             </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <Card.Body>\n//                         <Card.Title>Order Summary</Card.Title>\n//                         <ListGroup variant=\"flush\">\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Items</Col>\n//                                     <Col>${cart.itemsPrice.toFixed(2)}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Shipping</Col>\n//                                     <Col>${cart.shippingPrice.toFixed(2)}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Tax</Col>\n//                                     <Col>${cart.taxPrice.toFixed(2)}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col><strong>Order Total</strong></Col>\n//                                     <Col><strong>${cart.totalPrice.toFixed(2)}</strong></Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <div className=\"d-grid\">\n//                                     <Button type=\"button\" onClick={placeOrderHandler}>Place Order</Button>\n//                                 </div>\n//                                 {loading && <LoadingBox></LoadingBox>}\n//                             </ListGroup.Item>\n//                         </ListGroup>\n//                     </Card.Body>\n//                 </Card>\n//             </Col>\n//         </Row>\n//     </div>\n//   )\n// }\nrfc;","map":{"version":3,"names":["rfc"],"sources":["/Users/isaka/Desktop/projects/kukupay/frontend/src/screens/PlaceOrderScreen.js"],"sourcesContent":["// import React, { useContext, useEffect, useReducer } from 'react';\n// import CheckoutSteps from '../components/CheckoutSteps';\n// import { Helmet } from 'react-helmet-async';\n// import { Link, useNavigate } from 'react-router-dom';\n// import { Store } from '../Store';\n// import { toast } from 'react-toastify';\n// import { getError } from '../utils';\n// import Button from 'react-bootstrap/Button';\n// import Col from 'react-bootstrap/Col';\n// import Card from 'react-bootstrap/Card';\n// import Row from 'react-bootstrap/Row';\n// import ListGroup from 'react-bootstrap/ListGroup';\n// import LoadingBox from '../components/LoadingBox';\n// import Axios from 'axios';\n\n\n// const reducer = (state, action) => {\n//     switch (action.type) {\n//         case 'CREATE_REQUEST':\n//             return { ...state, loading: true };\n//         case 'CREATE_SUCCESS':\n//             return { ...state, loading: false };\n//         case 'CREATE_FAIL':\n//             return { ...state, loading: false };\n//         default:\n//             return state;\n//     }\n// }\n\n\n// export default function PlaceOrderScreen() {\n//     const navigate = useNavigate();\n    \n//     const [{ loading }, dispatch] = useReducer(reducer, { loading: false, });\n\n//     const { state, dispatch: ctxDispatch } = useContext(Store);\n//     const { cart, userInfo } = state;\n\n//     const  round2 = (num) => Math.round(num * 100 + Number.EPSLON) / 100; //123.2345 => 123.23\n//     cart.itemsPrice = round2(\n//         cart.cartItems.reduce((a, c) => a + c.quantity * c.price, 0)\n//     );\n//     cart.shippingPrice = cart.itemsPrice > 100 ? round2(0) : round2(10);\n//     cart.taxPrice = round2(0.15 * cart.itemsPrice);\n//     cart.totalPrice = cart.itemsPrice + cart.shippingPrice + cart.taxPrice;\n\n//     const placeOrderHandler = async () => {\n//         try {\n//             dispatch({ type: 'CREATE_REQUEST' });\n//             const { data } = await Axios.post('/api/orders', {\n//                 orderItems: cart.cartItems,\n//                 shippingAddress: cart.shippingAddress,\n//                 paymentMethod: cart.paymentMethod,\n//                 itemsPrice: cart.itemsPrice,\n//                 shippingPrice: cart.shippingPrice,\n//                 taxPrice: cart.taxPrice,\n//                 totalPrice: cart.totalPrice,\n\n//             },\n//             {\n//                 headers: {\n//                     authorization: `Bearer ${userInfo.token}`,\n//                 },\n//             }\n//             );\n//             ctxDispatch({ type: 'CART_CLEAR' });\n//             dispatch({ type: 'CREATE_SUCCESS' });\n//             localStorage.removeItem('cartItems');\n//             navigate(`/order/${data.order._id}`)\n//         } catch (err) {\n//             dispatch({ type: 'CREATE_FAIL' });\n//             toast.error(getError(err));\n//         }\n//     }\n\n    \n\n\n//     useEffect(() => {\n//         if (!cart.paymentMethod){\n//             navigate('/payment');\n//         }\n//     },[cart, navigate]);\n\n//   return (\n//     <div>\n//         <CheckoutSteps step1 step2 step3 step4></CheckoutSteps>\n//         <Helmet>\n//             <title>Preview Order</title>\n//         </Helmet>\n//         <h1 className=\"my-3\">Preview Order</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <Card className=\"mb-3\">\n//                 <Card.Body>\n//                     <Card.Title>Shipping</Card.Title>\n//                     <Card.Text>\n//                         <strong> Name:</strong> {cart.shippingAddress.fullName} <br/>\n//                         <strong>Address:</strong> {cart.shippingAddress.address}, {cart.shippingAddress.city}, {cart.shippingAddress.postalCode}, {cart.shippingAddress.country}\n//                     </Card.Text>\n//                     <Link to=\"/shipping\">Edit</Link>\n//                 </Card.Body>\n//                 </Card>\n//                 <Card className=\"mb-3\">\n//                     <Card.Body>\n//                         <Card.Title>Payment</Card.Title>\n//                         <Card.Text>\n//                             <strong>Method:</strong> {cart.paymentMethod}\n//                         </Card.Text>\n//                         <Link to=\"/payment\">Edit</Link>\n//                     </Card.Body>\n//                 </Card>\n\n//                 <Card className=\"mb-3\">\n//                     <Card.Body>\n//                         <Card.Title>Items</Card.Title>\n//                         <ListGroup variant=\"flush\">{cart.cartItems.map((item) => (<ListGroup.Item key={item._id}>\n//                             <Row className=\"align-items-center\">\n//                                 <Col md={6}><img src={item.image} alt={item.name} className=\"img-fluid rounded img-thumbnail\"></img>{' '}\n//                                 <Link to={`/product/${item.slug}`}> {item.name}</Link></Col>\n//                                 <Col md={3}>\n//                                     <span>{item.quantity}</span>\n//                                 </Col>\n//                                 <Col md={3}>${item.price}</Col>\n//                             </Row>\n//                         </ListGroup.Item>))}</ListGroup>\n//                         <Link to=\"/cart\">Edit</Link>\n//                     </Card.Body>\n//                 </Card>\n//             </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <Card.Body>\n//                         <Card.Title>Order Summary</Card.Title>\n//                         <ListGroup variant=\"flush\">\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Items</Col>\n//                                     <Col>${cart.itemsPrice.toFixed(2)}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Shipping</Col>\n//                                     <Col>${cart.shippingPrice.toFixed(2)}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Tax</Col>\n//                                     <Col>${cart.taxPrice.toFixed(2)}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col><strong>Order Total</strong></Col>\n//                                     <Col><strong>${cart.totalPrice.toFixed(2)}</strong></Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <div className=\"d-grid\">\n//                                     <Button type=\"button\" onClick={placeOrderHandler}>Place Order</Button>\n//                                 </div>\n//                                 {loading && <LoadingBox></LoadingBox>}\n//                             </ListGroup.Item>\n//                         </ListGroup>\n//                     </Card.Body>\n//                 </Card>\n//             </Col>\n//         </Row>\n//     </div>\n//   )\n// }\n\nrfc\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,GAAG"},"metadata":{},"sourceType":"module"}